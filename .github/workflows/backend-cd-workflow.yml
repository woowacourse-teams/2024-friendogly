name: deploy

on:
  pull_request:
    branches: [ "develop","fix/be/swagger-connection" ]
  push:
    branches: ['develop']
     

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: 8.1.1

      - name: Grant execute permission for gradlew
        working-directory: ./backend
        run: chmod +x gradlew
        
      - name: Build project using Gradle
        working-directory: ./backend
        run: ./gradlew bootJar


      - name: 디렉토리 경로 확인
        working-directory: ./backend
        run: pwd

      - name: 파일 경로 찾기
        working-directory: ./backend
        run: find . -name "friendogly-0.0.1-SNAPSHOT.jar"

      - name: GlobalExceptionHandler 내용 확인
        run: cat ./backend/src/main/java/com/woowacourse/friendogly/GlobalExceptionHandler.java
        
      - name: 경로 이동
        working-directory: ./backend
        run: |
          cd build/libs
          pwd
          ls
          ls -l friendogly-0.0.1-SNAPSHOT.jar
        
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          working-directory: ./backend
          name: friendogly-be-develop-jar
          path: ./backend/build/libs/friendogly-0.0.1-SNAPSHOT.jar
          
  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: change permission
        run: |
          sudo chown -R ubuntu:ubuntu /home/ubuntu/actions-runner/_work/2024-friendogly 
      - name: 기존 jar 삭제
        run: |
          rm -rf ./backend/build/libsfriendogly-be-develop-jar
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: friendogly-be-develop-jar
          path: ./backend/build/libs

      - name: Check if port 8080 
        run: |
          lsof -t -i:8080

      - name: Check if port 80
        run: |
          lsof -t -i:80
          
      - name: Check if port 8080 is in use
        id: check-port
        run: |
          # Find the PID of the process using port 8080
          PID=$(lsof -t -i:8080 || true)
          
          # Check if PID is non-empty
          if [ -n "$PID" ]; then
            echo "PORT_8080_PID=$PID" >> $GITHUB_ENV
          else
            echo "PORT_8080_PID=none" >> $GITHUB_ENV
          fi

      - name: Debug environment variables
        run: |
          echo "PORT_8080_PID=${{ env.PORT_8080_PID }}"
          
      - name: Stop server if running
        run: |
          echo "Stopping server running on port 8080..."
          kill -9 ${{ env.PORT_8080_PID }}
          echo "Preivous running Server stopped."
          
      - name: Start server
        run: |
          cd backend/build/libs
          ls -l friendogly-0.0.1-SNAPSHOT.jar
          sudo nohup java -jar friendogly-0.0.1-SNAPSHOT.jar &
          echo "Lastest Backend API Server started."
